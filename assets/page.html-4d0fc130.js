import{a3 as i,Z as c,_ as l,a1 as a,a2 as e,$ as n,a0 as o,a4 as d,a5 as s,q as r}from"./framework-f408d5b9.js";const p={},u=s(`<h2 id="icon-support" tabindex="-1"><a class="header-anchor" href="#icon-support" aria-hidden="true">#</a> Icon Support</h2><p>You can configure the <code>icon</code> field in the frontmatter of the page, and fill in the FontClass of the corresponding icon to bind the icon to the page.</p><p>This icon is used in navbar, sidebar, breadcrumb and page title.</p><details class="hint-container details"><summary>Example</summary><div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">icon</span><span class="token punctuation">:</span> home</span>
<span class="token punctuation">---</span></span>
</code></pre></div></details>`,4),h={class:"hint-container info"},m=a("p",{class:"hint-container-title"},"Info",-1),f=a("h2",{id:"page-info-display",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#page-info-display","aria-hidden":"true"},"#"),e(" Page Info Display")],-1),g=a("h2",{id:"breadcrumb",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#breadcrumb","aria-hidden":"true"},"#"),e(" Breadcrumb")],-1),k=s('<h2 id="header-list" tabindex="-1"><a class="header-anchor" href="#header-list" aria-hidden="true">#</a> Header List</h2><p>In desktop mode, a list of article headers will automatically be displayed on the right side of the screen. (They will be placed in the sidebar on mobile devices)</p><p>If you donâ€™t want to display the title list on the right in desktop mode, please set <code>toc: false</code> in theme options.</p><p>You can also set it through <code>toc</code> in page frontmatter.</p><h2 id="contributors-and-last-updated-time" tabindex="-1"><a class="header-anchor" href="#contributors-and-last-updated-time" aria-hidden="true">#</a> Contributors and Last Updated Time</h2>',5),y=a("h2",{id:"prev-next-links",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#prev-next-links","aria-hidden":"true"},"#"),e(" Prev / Next Links")],-1),b=s(`<p>Prev and next links are automatically inferred based on the sidebar order of the active page. You can also explicitly overwrite or disable them globally with theme config or on specific pages using <code>Front matter</code>:</p><div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">prev</span><span class="token punctuation">:</span> ./some<span class="token punctuation">-</span>other<span class="token punctuation">-</span>page
<span class="token key atrule">next</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="token punctuation">---</span></span>
</code></pre></div><h2 id="comment" tabindex="-1"><a class="header-anchor" href="#comment" aria-hidden="true">#</a> Comment</h2>`,3),_=s(`<h2 id="customize-layout" tabindex="-1"><a class="header-anchor" href="#customize-layout" aria-hidden="true">#</a> Customize Layout</h2><p>By default the content of each <code>*.md</code> file is rendered in a <code>&lt;div class=&quot;page&quot;&gt;</code> container, along with the sidebar, auto-generated edit links and prev/next links. To use a fully custom component in place of the page, you can again specify the component to use using frontmatter:</p><div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">layout</span><span class="token punctuation">:</span> SpecialLayout</span>
<span class="token punctuation">---</span></span>
</code></pre></div><p>This will render <code>SpecialLayout</code> layout registered in VuePress for the given page.</p>`,4),v={class:"hint-container note"},x=s('<p class="hint-container-title">Note</p><p>The theme only provides <code>Layout</code>, <code>404</code> layout.</p><p>Also the theme:</p><ul><li>Provides a <code>Blog</code> layout when the blogging feature is enabled</li><li>Provides a <code>Slide</code> layout when the slideshow feature is enabled</li></ul>',4),w=s(`<h2 id="customize-container-class" tabindex="-1"><a class="header-anchor" href="#customize-container-class" aria-hidden="true">#</a> Customize Container Class</h2><p>By default, each page is rendered in a <code>div</code> with class <code>theme-container</code>. To apply some special styles to specific pages, you can additionally specify a class name by setting <code>containerClass</code> in frontmatter</p><div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">containerClass</span><span class="token punctuation">:</span> fancy<span class="token punctuation">-</span>container</span>
<span class="token punctuation">---</span></span>
</code></pre></div><p>This will render in <code>&lt;div class=&quot;theme-container fancy-container&quot; /&gt;</code> for the current page.</p>`,4);function C(P,T){const t=r("RouterLink");return c(),l("div",null,[u,a("div",h,[m,a("p",null,[e("For icon settings, please see "),n(t,{to:"/guide/interface/icon.html"},{default:o(()=>[e("Icon Support")]),_:1})])]),f,a("p",null,[e("Please see "),n(t,{to:"/guide/feature/page-info.html"},{default:o(()=>[e("Page Info Section")]),_:1})]),g,a("p",null,[e("Please see "),n(t,{to:"/guide/layout/breadcrumb.html"},{default:o(()=>[e("Breadcrumb")]),_:1}),e(".")]),k,a("p",null,[e("Please see "),n(t,{to:"/guide/feature/meta.html"},{default:o(()=>[e("Page Meta")]),_:1}),e(".")]),y,d(" TODO: Improve it "),b,a("p",null,[e("Please see "),n(t,{to:"/guide/feature/comment.html"},{default:o(()=>[e("Comment section")]),_:1}),e(" for details.")]),_,a("div",v,[x,a("p",null,[e("If you want to provide your own layout, please see "),n(t,{to:"/cookbook/advanced/extend.html"},{default:o(()=>[e("Theme Extending")]),_:1}),e(".")])]),w])}const L=i(p,[["render",C],["__file","page.html.vue"]]);export{L as default};
