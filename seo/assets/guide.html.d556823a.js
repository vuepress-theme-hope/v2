import{f as e}from"./app.8385a162.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";const n={},a=e(`<p>This plugin will inject the <code>&lt;meta&gt;</code> tag to enhance the search engine optimization of the site.</p><h2 id="out-of-box" tabindex="-1"><a class="header-anchor" href="#out-of-box" aria-hidden="true">#</a> Out of box</h2><p>The plugin is used out of the box. Without any configuration, it will extract the corresponding information from the page content to generate the <code>&lt;meta&gt;</code> tag as much as possible.</p><p>By default, the plugin will read the site configuration, theme configuration and page frontmatter to automatically generate <code>&lt;meta&gt;</code> tags as much as possible. Such as site name, page title, page type, writing date, last update date, and article tags are all automatically generated.</p><p>The following are the <code>&lt;meta&gt;</code> tags and their values that will be injected into <code>&lt;head&gt;</code> by default:</p><table><thead><tr><th style="text-align:center;">property</th><th style="text-align:center;">content</th></tr></thead><tbody><tr><td style="text-align:center;"><code>og:url</code></td><td style="text-align:center;"><code>themeConfig.hostname</code> + <code>path</code></td></tr><tr><td style="text-align:center;"><code>og:site_name</code></td><td style="text-align:center;"><code>$site.title</code></td></tr><tr><td style="text-align:center;"><code>og:title</code></td><td style="text-align:center;"><code>page.title</code></td></tr><tr><td style="text-align:center;"><code>og:description</code></td><td style="text-align:center;"><code>page.frontmatter.description</code></td></tr><tr><td style="text-align:center;"><code>og:type</code></td><td style="text-align:center;"><code>&#39;article&#39;</code></td></tr><tr><td style="text-align:center;"><code>og:image</code></td><td style="text-align:center;"><code>themeConfig.hostname</code> + <code>page.frontmatter.image</code></td></tr><tr><td style="text-align:center;"><code>og:updated_time</code></td><td style="text-align:center;"><code>page.updatedTimeStamp</code></td></tr><tr><td style="text-align:center;"><code>og:locale</code></td><td style="text-align:center;"><code>page._computed.$lang</code></td></tr><tr><td style="text-align:center;"><code>og:locale:alternate</code></td><td style="text-align:center;">Other languages including in <code>$themeConfig.locales</code></td></tr><tr><td style="text-align:center;"><code>twitter:card</code></td><td style="text-align:center;"><code>&#39;summary_large_image&#39;</code></td></tr><tr><td style="text-align:center;"><code>twitter:image:alt</code></td><td style="text-align:center;"><code>$site.title</code></td></tr><tr><td style="text-align:center;"><code>article:author</code></td><td style="text-align:center;"><code>page.frontmatter.author</code> || <code>themeConfig.author</code></td></tr><tr><td style="text-align:center;"><code>article:tag</code></td><td style="text-align:center;"><code>page.frontmatter.tags</code> || <code>page.frontmatter.tag</code></td></tr><tr><td style="text-align:center;"><code>article:published_time</code></td><td style="text-align:center;"><code>page.frontmatter.time</code> || <code>page.frontmatter.date</code> || <code>page.createTimeStamp</code></td></tr><tr><td style="text-align:center;"><code>article:modified_time</code></td><td style="text-align:center;"><code>page.updatedTimeStamp</code></td></tr></tbody></table><h2 id="free-customization" tabindex="-1"><a class="header-anchor" href="#free-customization" aria-hidden="true">#</a> Free customization</h2><p>You can configure the <code>meta</code> option in the frontmatter of the page to customize the content of the <code>&lt;meta&gt;</code> tag of a specific page for SEO.</p><p>For example:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">meta</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> keywords
    <span class="token key atrule">content</span><span class="token punctuation">:</span> SEO plugin</span>
<span class="token punctuation">---</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Will automatically inject <code>&lt;meta name=&quot;keywords&quot; content=&quot;SEO plugin&quot; /&gt;</code>.</p><h2 id="customize-generation-process" tabindex="-1"><a class="header-anchor" href="#customize-generation-process" aria-hidden="true">#</a> Customize generation process</h2><p>This plugin also allows you to fully control the generation logic of <code>&lt;meta&gt;</code> tags.</p><h3 id="seo" tabindex="-1"><a class="header-anchor" href="#seo" aria-hidden="true">#</a> seo</h3><p>You can use the <code>seo</code> of the plugin option to pass in a function to inject a new <code>&lt;meta&gt;</code> tag or override the default generated content in the <a href="#out-of-box">Out of box</a> section. You need to return an object in the format of <code>&lt;property&gt;: &lt;content&gt;</code>.</p><p>For example, if you return <code>{&#39;og:url&#39;:&#39;google.com&#39;,&#39;og:image&#39;:&#39;google.com/logo.jpg&#39; }</code>, the plugin will inject the following content into <code>&lt;head&gt;</code>:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>google.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>og:image<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>google.com/logo.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="custommeta" tabindex="-1"><a class="header-anchor" href="#custommeta" aria-hidden="true">#</a> customMeta</h3><p>When the <code>&lt;meta&gt;</code> you need to inject does not use <code>property</code> and <code>content</code>, or you want to remove the existing meta, you can pass in a custom generation function to the plugin option <code>customMeta</code> to completely customize the <code>&lt;meta&gt;</code> tag .</p><p>The structure of <code>customMeta</code> is <code>(meta: Meta[], info: PageSeoInfo) =&gt; void</code></p><p>Interface of <code>PageSeoInfo</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PageSeoInfo</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** Current Page Object */</span>
  page<span class="token operator">:</span> Page<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Vuepress Config  */</span>
  site<span class="token operator">:</span> SiteConfig<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Current ThemeConfig */</span>
  themeConfig<span class="token operator">:</span> ThemeConfig <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** langs which are supported */</span>
  locale<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** Current page path */</span>
  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>The interface of <code>Meta</code> is <code>Record&lt;&quot;content&quot; | &quot;name&quot; | &quot;charset&quot; | &quot;http-equiv&quot;, string&gt;</code>, the key of the object will be rendered as the attribute of the <code>&lt;meta&gt;</code> tag, and the value will be rendered as The value of the corresponding attribute.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">meta</span><span class="token operator">:</span> Meta<span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> PageSeoInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>property <span class="token operator">===</span> <span class="token string">&quot;og:type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> meta<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  meta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Will inject <code>&lt;meta a=&quot;1&quot; b=&quot;2&quot; /&gt;</code> into the <code>&lt;head&gt;</code> of the current page, and remove any existing <code>&lt;meta property=&quot;og:type&quot; /&gt;</code>.</p><h2 id="seo-introduction" tabindex="-1"><a class="header-anchor" href="#seo-introduction" aria-hidden="true">#</a> SEO Introduction</h2><p><strong>S</strong>earch <strong>e</strong>ngine <strong>optimization</strong> (SEO) is the process of improving the quality and quantity of site traffic to a site or a web page from search engines. SEO targets unpaid traffic (known as &quot;natural&quot; or &quot;organic&quot; results) rather than direct traffic or paid traffic. Unpaid traffic may originate from different kinds of searches, including image search, video search, academic search, news search, and industry-specific vertical search engines.</p><p>As an internet marketing strategy, SEO considers how search engines work, the computer-programmed algorithms that dictate search engine behavior, what people search for, the actual search terms or keywords typed into search engines, and which search engines are preferred by their targeted audience. SEO is performed because a site will receive more visitors from a search engine when sites rank higher on the search engine results page (SERP). These visitors can then potentially be converted into customers.</p><h2 id="related-documents" tabindex="-1"><a class="header-anchor" href="#related-documents" aria-hidden="true">#</a> Related documents</h2><ul><li><p><a href="https://ogp.me/" target="_blank" rel="noopener noreferrer">Open Content Protocol OGP</a> (<strong>O</strong>pen <strong>G</strong>raph <strong>Pr</strong>otocal)</p><p>This plugin perfectly supports this protocol and will automatically generate <code>&lt;meta&gt;</code> tags that conform to the protocol.</p></li><li><p><a href="https://www.w3.org/TR/json-ld-api/" target="_blank" rel="noopener noreferrer">JSON-LD 1.1</a></p><p>Since VuePress does not provide plugins or themes to inject <code>&lt;script&gt;</code> into the <code>&lt;head&gt;</code> tag of SSR rendered content, JSON-LD cannot be implemented.</p></li><li><p><a href="https://www.w3.org/TR/rdfa-primer/" target="_blank" rel="noopener noreferrer">RDFa 1.1</a></p><p>RDFa mainly marks HTML structure. This is what the plugin cannot support. <a href="https://vuepress-theme-hope.github.io/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a> uses this feature to pass Google\u2019s rich media structure test. You can consider using it.</p></li><li><p><a href="https://schema.org/" target="_blank" rel="noopener noreferrer">Schema.Org</a></p><p>Schema definition site for structural markup</p></li></ul><h2 id="related-tools" tabindex="-1"><a class="header-anchor" href="#related-tools" aria-hidden="true">#</a> Related tools</h2><p>You can use <a href="https://search.google.com/test/rich-results" target="_blank" rel="noopener noreferrer">Google Rich Media Structure Test Tool</a> to test this site.</p>`,33);function s(o,c){return a}var l=t(n,[["render",s]]);export{l as default};
