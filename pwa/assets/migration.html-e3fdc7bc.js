import{_ as e,W as o,X as c,a1 as d}from"./framework-ecf98296.js";const i={},t=d('<h2 id="新选项" tabindex="-1"><a class="header-anchor" href="#新选项" aria-hidden="true">#</a> 新选项</h2><ul><li><p><code>update</code>: 控制 SW 的更新逻辑</p><ul><li><p><code>&quot;disabled&quot;</code>: 即使有新的 service worker 也不做任何事情，新的 service work 开始等待后，会在用户下次访问时接管页面，让用户获得新内容。</p></li><li><p><code>&quot;available&quot;</code>: 仅当新的 service worker 可用时才显示更新弹出窗口</p></li><li><p><code>&quot;hint&quot;</code>: 显示更新内容可用提示，并允许用户立即刷新。当新的 SW 成功注册后，将转为更新内容就绪弹窗。</p><p>当你希望用户立即查看新文档时，这很有帮助。</p></li><li><p><code>&quot;force&quot;</code>: 立即注销当前 Service Worker 然后刷新以获取新内容</p></li></ul></li><li><p><code>appendBase</code>: 自动向 <code>manifest</code> 选项插入 <code>base</code></p></li><li><p><code>hintComponent</code>: 检测到新内容的提示组件</p></li><li><p>shouldPrefetch 提示: 现在插件将检查配置文件中的 <code>shouldPrefetch</code> 选项并警告你禁用它。</p></li></ul><h2 id="选项变更" tabindex="-1"><a class="header-anchor" href="#选项变更" aria-hidden="true">#</a> 选项变更</h2><ul><li><p><code>cacheHTML</code> 默认值由 <code>true</code> 改为 <code>false</code></p><p>这能有效降低 SW 更新时间</p></li><li><p><code>popupComponent</code> 重命名为 <code>updateComponent</code></p><p>这是因为我们新增了一个提示弹窗，所以需要避免名称混淆</p></li></ul>',4),l=[t];function a(p,r){return o(),c("div",null,l)}const s=e(i,[["render",a],["__file","migration.html.vue"]]);export{s as default};
